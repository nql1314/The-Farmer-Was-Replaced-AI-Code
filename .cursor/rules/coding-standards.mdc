---
alwaysApply: true
---

# TFWR 编码规范

## 注释规范

### ❌ 禁止使用
- **多行字符串注释** (`"""` 或 `'''`)
- 所有形式的文档字符串 (docstrings)

### ✅ 只允许使用
- **单行注释** (`#`)
- 函数说明、变量说明都用 `#` 注释

### 示例

#### ❌ 错误的注释方式
```python
def my_function():
    """
    这是一个函数
    它做某些事情
    """
    pass

def another_function():
    '''这也是错误的'''
    pass
```

#### ✅ 正确的注释方式
```python
# 这是一个函数，它做某些事情
def my_function():
    # 函数内部注释
    pass

# 辅助函数：计算某个值
def helper_function():
    # 返回计算结果
    return value
```

## 代码风格

### 函数定义
```python
# 函数说明写在函数定义上方
# 参数：x, y - 坐标
# 返回：布尔值
def should_plant(x, y):
    # 函数内部逻辑
    return x % 2 == 0
```

### 变量定义
```python
# 配置参数
THRESHOLD = 100  # 阈值
world_size = get_world_size()  # 世界大小
```

### 复杂逻辑
```python
# 检查是否需要种植
# 条件1: 位置满足要求
# 条件2: 资源充足
if condition1 and condition2:
    # 执行种植
    plant(Entities.Carrot)
```

## 禁止使用的功能

### ❌ 未解锁或不支持的功能
在代码中**永远不要使用**以下功能：

1. **Lambda 函数**
   ```python
   # ❌ 错误
   func = lambda x: x * 2
   sorted_list = sorted(items, key=lambda x: x.value)
   ```

2. **多行字符串注释**
   ```python
   # ❌ 错误
   """这是多行注释"""
   '''这也是错误的'''
   ```

3. **生成器和yield**
   ```python
   # ❌ 错误
   def my_generator():
       yield value
   
   for item in my_generator():
       pass
   ```

4. **类型转换函数**
   ```python
   # ❌ 错误 - int() 不支持
   percentage = int(value * 100)
   
   # ✅ 正确 - 直接使用数学运算
   percentage = value * 100
   ```

5. **其他未确认解锁的高级特性**
   - 列表推导式（如果未解锁）
   - 生成器表达式（如果未解锁）
   - 装饰器（如果未解锁）
   - with 语句（如果未解锁）
   - try/except（如果未解锁）

### ✅ 替代方案

**替代 Lambda：使用普通函数**
```python
# ✅ 正确
def multiply_by_two(x):
    return x * 2

func = multiply_by_two
```

**替代多行注释：使用多个单行注释**
```python
# ✅ 正确
# 这是第一行说明
# 这是第二行说明
# 这是第三行说明
```

**替代 Yield：使用列表返回**
```python
# ❌ 错误
def get_positions():
    for x in range(10):
        yield (x, x * 2)

# ✅ 正确
def get_positions():
    result = []
    for x in range(10):
        result.append((x, x * 2))
    return result
```

**替代 int()：直接计算**
```python
# ❌ 错误
percentage = int(value * 100)

# ✅ 正确 - 保留小数
percentage = value * 100

# ✅ 正确 - 使用整数除法
count = total // divisor
```

## 记住
- 永远使用 `#` 进行注释
- 不要使用 `"""` 或 `'''`
- 不要使用 `lambda`
- 不要使用 `yield`
- 不要使用 `int()`, `float()`, `bool()` 等类型转换（除非确认支持）
- 只使用已确认解锁的功能
- 保持代码清晰，注释简洁

## 已确认支持的内置函数
参考游戏中显示的函数列表：
- `abs`, `len`, `max`, `min`, `str`
- `dict`, `list`, `set`
- `range`, `random`
- 游戏特定函数（`harvest`, `plant`, `move` 等）

## 字典使用限制

### ❌ 不支持的字典方法
```python
# ❌ 错误 - items() 不支持
for key, value in my_dict.items():
    pass

# ❌ 错误 - keys() 不支持
for key in my_dict.keys():
    pass

# ❌ 错误 - values() 不支持
for value in my_dict.values():
    pass
```

### ✅ 正确的字典遍历方式
```python
# ✅ 正确 - 直接遍历字典
for key in my_dict:
    value = my_dict[key]
    # 使用 key 和 value
```

## 运算符使用
- ✅ 算术：`+`, `-`, `*`, `/`, `//`, `%`, `**`
- ✅ 比较：`==`, `!=`, `<`, `>`, `<=`, `>=`
- ✅ 逻辑：`and`, `or`, `not`
- ✅ 赋值：`=`, `+=`, `-=`, `*=`, `/=`
